package codegen

import (
	"bytes"
	"fmt"
	"text/template"
)

const (
	decodeBaseType = iota
	encodeBaseType
	//decodeBaseTypeSlice
	//encodeBaseTypeSlice
	//decodeRawType
	//encodeRawType
	//decodeStruct
	//encodeStruct
	//decodeStructSlice
	//encodeStructSlice
	//decodeTime
	//encodeTime
	//decodeUnknown
	//encodeUnknown
//	resetFieldValue
)

//// EncodeBinary implements fast binary serialization
//func (p *Profile) EncodeBinary(enc *bintly.Writer) error {
//	enc.String(p.Key)
//	enc.Int(p.ID)
//	enc.String(p.RtbID)
//	enc.String(p.StrID)
//	enc.String(p.MobileURL)
//	enc.String(p.SiteType)
//	enc.String(p.Name)
//	enc.String(p.Keywords)
//	enc.Strings(p.Categories)
//	enc.Time(p.Created)
//	enc.String(p.Bundle)
//	enc.String(p.Page)
//	enc.String(p.Domain)
//	enc.String(p.StoreURL)
//	enc.String(p.RawSiteId)
//	enc.String(p.Metadata)
//	enc.String(p.Description)
//	enc.String(p.Language)
//	enc.Int(p.PublisherID)
//	enc.Ints(p.SiteList)
//	return nil


var fieldTemplate = map[int]string{
	encodeBaseType : `enc.{{.Type}}(p.{{.Var}})`,
	decodeBaseType: `enc.{{.Type}}(&p.{{.Var}})`,

}

const (
	fileCode = iota
	encodingStructType
	baseTypeSlice
	structTypeSlice
	resetStruct
	poolVar
	poolInit
	embeddedStructInit
)

var blockTemplate = map[int]string{
	fileCode: `// Code generated by GoJayGen. DO NOT EDIT.\n\n
package {{.Pkg}}

import (
{{.Imports}}
)
{{.Code}}

`,
	encodingStructType: `

//MarshalJSONObject implements MarshalerJSONObject
func ({{.Receiver}}) MarshalJSONObject(enc *gojay.Encoder) {
{{.EncodingCases}}
}

//IsNil checks if instance is nil
func ({{.Receiver}}) IsNil() bool {
    return {{.Alias}} == nil
}

// UnmarshalJSONObject implements gojay's UnmarshalerJSONObject
func ({{.Receiver}}) UnmarshalJSONObject(dec *gojay.Decoder, k string) error {
{{.InitEmbedded}}
	switch k {
{{.DecodingCases}}	
	}
	return nil
}

// NKeys returns the number of keys to unmarshal
func ({{.Receiver}}) NKeys() int { return {{.FieldCount}} }

{{.Reset}}

`,

	baseTypeSlice: `

type {{.HelperType}} {{.RawType}}

//UnmarshalJSONArray decodes JSON array elements into slice
func (a *{{.HelperType}}) UnmarshalJSONArray(dec *gojay.Decoder) error {
	var value {{.ComponentType}}
	if err := dec.{{.DecodingMethod}}(&value); err != nil {
		return err
	}
	*a = append(*a, {{.ComponentInitModifier}}value)
	return nil
}

//MarshalJSONArray encodes arrays into JSON
func (a {{.HelperType}}) MarshalJSONArray(enc *gojay.Encoder) {
	for _, item := range a {
		enc.{{.EncodingMethod}}({{.ComponentDereferenceModifier}}item)
	}
}

//IsNil checks if array is nil
func (a {{.HelperType}}) IsNil() bool {
	return len(a) == 0
}
`,

	structTypeSlice: `
type {{.HelperType}} {{.RawType}}

func (s *{{.HelperType}}) UnmarshalJSONArray(dec *gojay.Decoder) error {
	var value = {{.ComponentInit}}
	if err := dec.Object({{.ComponentPointerModifier}}value); err != nil {
		return err
	}
	*s = append(*s, value)
	return nil
}

func (s {{.HelperType}})  MarshalJSONArray(enc *gojay.Encoder) {
	for i  := range s {
		enc.Object({{.ComponentPointerModifier}}s[i])
	}
}


func (s {{.HelperType}})  IsNil() bool {
	return len(s) == 0
}


`,

	resetStruct: `
// Reset reset fields 
func ({{.Receiver}}) Reset()  {
{{.Reset}}
}
`,

	poolVar: `var {{.PoolName}} *sync.Pool`,
	poolInit: `	{{.PoolName}} = &sync.Pool {
		New: func()interface{} {
			return &{{.Type}}{}
		},
	}`,
	embeddedStructInit: `if {{.Accessor}} == nil { 
		{{.Accessor}} = {{.Init}}
	}`,
}


func expandTemplate(namespace string, dictionary map[int]string, key int, data interface{}) (string, error) {
	var id = fmt.Sprintf("%v_%v", namespace, key)
	textTemplate, ok := dictionary[key]
	if !ok {
		return "", fmt.Errorf("failed to lookup template for %v.%v", namespace, key)
	}
	temlate, err := template.New(id).Parse(textTemplate)
	if err != nil {
		return "", fmt.Errorf("fiailed to parse template %v %v, due to %v", namespace, key, err)
	}
	writer := new(bytes.Buffer)
	err = temlate.Execute(writer, data)
	return writer.String(), err
}

func expandFieldTemplate(key int, data interface{}) (string, error) {
	return expandTemplate("fieldTemplate", fieldTemplate, key, data)
}

func expandBlockTemplate(key int, data interface{}) (string, error) {
	return expandTemplate("blockTemplate", blockTemplate, key, data)
}




