package codegen

import (
	"bytes"
	"fmt"
	"text/template"
)

const (
	decodeBaseType = iota
	encodeBaseType
)

//// EncodeBinary implements fast binary serialization
//func (p *Profile) EncodeBinary(enc *bintly.Writer) error {
//	enc.String(p.Key)
//	enc.Int(p.ID)
//	enc.String(p.RtbID)
//	enc.String(p.StrID)
//	enc.String(p.MobileURL)
//	enc.String(p.SiteType)
//	enc.String(p.Name)
//	enc.String(p.Keywords)
//	enc.Strings(p.Categories)
//	enc.Time(p.Created)
//	enc.String(p.Bundle)
//	enc.String(p.Page)
//	enc.String(p.Domain)
//	enc.String(p.StoreURL)
//	enc.String(p.RawSiteId)
//	enc.String(p.Metadata)
//	enc.String(p.Description)
//	enc.String(p.Language)
//	enc.Int(p.PublisherID)
//	enc.Ints(p.SiteList)
//	return nil

var fieldTemplate = map[int]string{
	encodeBaseType: `enc.{{.Type}}(p.{{.Var}})`,
	decodeBaseType: `enc.{{.Type}}(&p.{{.Var}})`,
}

const (
	fileCode = iota
	encodingStructType
)

var blockTemplate = map[int]string{
	fileCode: `// Code generated by GoJayGen. DO NOT EDIT.\n\n
package {{.Pkg}}

import (
{{.Imports}}
"github.com/viant/bintly"
)
{{.Code}}

`,
	encodingStructType: `

func ({{.Receiver}}) EncodeBinary(stream *bintly.Writer) error {
{{.EncodingCases}}
}

//IsNil checks if instance is nil
func ({{.Receiver}}) IsNil() bool {
    return {{.Alias}} == nil
}

func ({{.Receiver}}) DecodeBinary(stream *bintly.Reader) error {
{{.InitEmbedded}}
	switch k {
{{.DecodingCases}}	
	}
	return nil
}

// NKeys returns the number of keys to unmarshal
func ({{.Receiver}}) NKeys() int { return {{.FieldCount}} }

{{.Reset}}

`,
}

func expandTemplate(namespace string, dictionary map[int]string, key int, data interface{}) (string, error) {
	var id = fmt.Sprintf("%v_%v", namespace, key)
	textTemplate, ok := dictionary[key]
	if !ok {
		return "", fmt.Errorf("failed to lookup template for %v.%v", namespace, key)
	}
	temlate, err := template.New(id).Parse(textTemplate)
	if err != nil {
		return "", fmt.Errorf("fiailed to parse template %v %v, due to %v", namespace, key, err)
	}
	writer := new(bytes.Buffer)
	err = temlate.Execute(writer, data)
	return writer.String(), err
}

func expandFieldTemplate(key int, data interface{}) (string, error) {
	return expandTemplate("fieldTemplate", fieldTemplate, key, data)
}

func expandBlockTemplate(key int, data interface{}) (string, error) {
	return expandTemplate("blockTemplate", blockTemplate, key, data)
}
